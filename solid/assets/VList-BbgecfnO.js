import{h as o,t as s,j as d,m as u,i as f,a as m}from"./iframe-CvHrSYf4.js";import{V as c}from"./Virtualizer-BZP1tuL2.js";var p=s("<div>");const a=n=>{const[e,l]=o(n,["ref","data","children","bufferSize","itemSize","shift","horizontal","keepMounted","cache","item","onScroll","onScrollEnd","style"]);return(()=>{var t=p();return d(t,u(l,{get style(){return{display:e.horizontal?"inline-block":"block",[e.horizontal?"overflow-x":"overflow-y"]:"auto",contain:"strict",width:"100%",height:"100%",...e.style}}}),!1,!0),f(t,m(c,{ref(r){var i=e.ref;typeof i=="function"?i(r):e.ref=r},get data(){return e.data},get bufferSize(){return e.bufferSize},get itemSize(){return e.itemSize},get shift(){return e.shift},get horizontal(){return e.horizontal},get keepMounted(){return e.keepMounted},get cache(){return e.cache},get item(){return e.item},get onScroll(){return e.onScroll},get onScrollEnd(){return e.onScrollEnd},get children(){return e.children}})),t})()};try{a.displayName="VList",a.__docgenInfo={description:"Virtualized list component. See {@link VListProps} and {@link VListHandle}.",displayName:"VList",props:{ref:{defaultValue:null,description:"Get reference to {@link VirtualizerHandle}.",name:"ref",required:!1,type:{name:"((handle?: VirtualizerHandle | undefined) => void) | undefined"}},data:{defaultValue:null,description:"The data items rendered by this component.",name:"data",required:!0,type:{name:"readonly T[]"}},children:{defaultValue:null,description:"The elements renderer function.",name:"children",required:!0,type:{name:"(data: T, index: Accessor<number>) => Element"}},bufferSize:{defaultValue:null,description:`Extra item space in pixels to render before/after the viewport. The minimum value is 0. Lower value will give better performance but you can increase to avoid showing blank items in fast scrolling.
@defaultValue 200`,name:"bufferSize",required:!1,type:{name:"number | undefined"}},itemSize:{defaultValue:null,description:`Item size hint for unmeasured items in pixels. It will help to reduce scroll jump when items are measured if used properly.

- If not set, initial item sizes will be automatically estimated from measured sizes. This is recommended for most cases.
- If set, you can opt out estimation and use the value as initial item size.`,name:"itemSize",required:!1,type:{name:"number | undefined"}},shift:{defaultValue:null,description:"While true is set, scroll position will be maintained from the end not usual start when items are added to/removed from start. It's recommended to set false if you add to/remove from mid/end of the list because it can cause unexpected behavior. This prop is useful for reverse infinite scrolling.",name:"shift",required:!1,type:{name:"boolean | undefined"}},horizontal:{defaultValue:null,description:"If true, rendered as a horizontally scrollable list. Otherwise rendered as a vertically scrollable list.",name:"horizontal",required:!1,type:{name:"boolean | undefined"}},cache:{defaultValue:null,description:`You can restore cache by passing a {@link CacheSnapshot} on mount. This is useful when you want to restore scroll position after navigation. The snapshot can be obtained from {@link VirtualizerHandle.cache}.

**The length of items should be the same as when you take the snapshot, otherwise restoration may not work as expected.**`,name:"cache",required:!1,type:{name:"CacheSnapshot | undefined"}},item:{defaultValue:null,description:`Component or element type for item element.
@defaultValue "div"`,name:"item",required:!1,type:{name:"ValidComponent | undefined"}},onScroll:{defaultValue:null,description:`Callback invoked whenever scroll offset changes.
@param offset Current scrollTop, or scrollLeft if horizontal: true.`,name:"onScroll",required:!1,type:{name:"((offset: number) => void) | undefined"}},onScrollEnd:{defaultValue:null,description:"Callback invoked when scrolling stops.",name:"onScrollEnd",required:!1,type:{name:"(() => void) | undefined"}},keepMounted:{defaultValue:null,description:"List of indexes that should be always mounted, even when off screen.",name:"keepMounted",required:!1,type:{name:"readonly number[] | undefined"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties | undefined"}}}}}catch{}export{a as V};
