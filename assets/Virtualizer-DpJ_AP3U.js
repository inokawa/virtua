import{j as _}from"./jsx-runtime-D_zvdyIk.js";import{r}from"./iframe-DyuHUQ_l.js";import{a as k,u as M,A as X,j as G,b as R,r as o,U as B,c as F,d as K,m as Y,g as W,s as Q,e as Z,k as ee,l as te,n as ne}from"./useLatestRef-BjuM-G0C.js";import{u as oe,L as se}from"./useChildren-zOYm5uLj.js";import{r as re}from"./index-DakkSod0.js";const ie=r.forwardRef(({children:V,count:x,overscan:L,itemSize:p,shift:O,horizontal:q,keepMounted:h,cache:A,startMargin:b=0,ssrCount:S,as:a="div",item:H="div",scrollRef:l,onScroll:N,onScrollEnd:P},j)=>{a=a;const[U,u]=oe(V,x),g=r.useRef(null),y=r.useRef(!!S),T=k(N),v=k(P),[e,m,s,c]=M(()=>{const t=!!q,n=Z(u,p,L,S,A,!p);return[n,ee(n,t),te(n,t),t]});u!==e.$getItemsLength()&&e.$update(X,[u,O]),b!==e.$getStartSpacerSize()&&e.$update(G,b);const[D,w]=r.useReducer(e.$getStateVersion,void 0,e.$getStateVersion),[I,z]=e.$getRange(),J=e.$isScrolling(),C=e.$getTotalSize(),d=[],E=t=>{const n=U(t);return _.jsx(se,{_resizer:m.$observeItem,_index:t,_offset:e.$getItemOffset(t),_hide:e.$isUnmeasuredItem(t),_as:H,_children:n,_isHorizontal:c,_isSSR:y[o]},ne(n,t))};if(R(()=>{y[o]=!1;const t=e.$subscribe(B,i=>{i?re.flushSync(w):w()}),n=e.$subscribe(F,()=>{T[o]&&T[o](e.$getScrollOffset())}),f=e.$subscribe(K,()=>{v[o]&&v[o]()}),$=i=>{m.$observeRoot(i),s.$observe(i)};return l?Y(()=>{l[o]&&$(l[o])}):$(g[o].parentElement),()=>{t(),n(),f(),m.$dispose(),s.$dispose()}},[]),R(()=>{s.$fixScrollJump()},[D]),r.useImperativeHandle(j,()=>({get cache(){return e.$getCacheSnapshot()},get scrollOffset(){return e.$getScrollOffset()},get scrollSize(){return W(e)},get viewportSize(){return e.$getViewportSize()},findStartIndex:e.$findStartIndex,findEndIndex:e.$findEndIndex,getItemOffset:e.$getItemOffset,getItemSize:e.$getItemSize,scrollToIndex:s.$scrollToIndex,scrollTo:s.$scrollTo,scrollBy:s.$scrollBy}),[]),h){const t=new Set(h);for(let n=I,f=z;n<=f;n++)t.add(n);Q([...t]).forEach(n=>{d.push(E(n))})}else for(let t=I,n=z;t<=n;t++)d.push(E(t));return _.jsx(a,{ref:g,style:{contain:"strict",overflowAnchor:"none",overflow:"clip",flex:"none",position:"relative",width:c?C:"100%",height:c?"100%":C,pointerEvents:J?"none":void 0},children:d})});ie.__docgenInfo={description:"Customizable list virtualizer for advanced usage. See {@link VirtualizerProps} and {@link VirtualizerHandle}.",methods:[{name:"cache",docblock:null,modifiers:["get"],params:[],returns:null},{name:"scrollOffset",docblock:null,modifiers:["get"],params:[],returns:null},{name:"scrollSize",docblock:null,modifiers:["get"],params:[],returns:null},{name:"viewportSize",docblock:null,modifiers:["get"],params:[],returns:null}],displayName:"Virtualizer",props:{children:{required:!0,tsType:{name:"union",raw:"ReactNode | ((index: number) => ReactElement)",elements:[{name:"ReactNode"},{name:"unknown"}]},description:`Elements rendered by this component.

You can also pass a function and set {@link VirtualizerProps.count} to create elements lazily.`},count:{required:!1,tsType:{name:"number"},description:"If you set a function to {@link VirtualizerProps.children}, you have to set total number of items to this prop."},overscan:{required:!1,tsType:{name:"number"},description:`Number of items to render above/below the visible bounds of the list. Lower value will give better performance but you can increase to avoid showing blank items in fast scrolling.
@defaultValue 4`},itemSize:{required:!1,tsType:{name:"number"},description:`Item size hint for unmeasured items. It will help to reduce scroll jump when items are measured if used properly.

- If not set, initial item sizes will be automatically estimated from measured sizes. This is recommended for most cases.
- If set, you can opt out estimation and use the value as initial item size.`},shift:{required:!1,tsType:{name:"boolean"},description:"While true is set, scroll position will be maintained from the end not usual start when items are added to/removed from start. It's recommended to set false if you add to/remove from mid/end of the list because it can cause unexpected behavior. This prop is useful for reverse infinite scrolling."},horizontal:{required:!1,tsType:{name:"boolean"},description:"If true, rendered as a horizontally scrollable list. Otherwise rendered as a vertically scrollable list."},keepMounted:{required:!1,tsType:{name:"unknown"},description:"List of indexes that should be always mounted, even when off screen."},cache:{required:!1,tsType:{name:"CacheSnapshot"},description:`You can restore cache by passing a {@link CacheSnapshot} on mount. This is useful when you want to restore scroll position after navigation. The snapshot can be obtained from {@link VirtualizerHandle.cache}.

**The length of items should be the same as when you take the snapshot, otherwise restoration may not work as expected.**`},startMargin:{required:!1,tsType:{name:"number"},description:"If you put an element before virtualizer, you have to define its height with this prop.",defaultValue:{value:"0",computed:!1}},ssrCount:{required:!1,tsType:{name:"number"},description:"A prop for SSR. If set, the specified amount of items will be mounted in the initial rendering regardless of the container size until hydrated."},as:{required:!1,tsType:{name:"union",raw:"keyof JSX.IntrinsicElements | CustomContainerComponent",elements:[{name:"JSX.IntrinsicElements"},{name:"ComponentType",elements:[{name:"CustomContainerComponentProps"}],raw:"ComponentType<CustomContainerComponentProps>"}]},description:`Component or element type for container element.
@defaultValue "div"`,defaultValue:{value:'"div"',computed:!1}},item:{required:!1,tsType:{name:"union",raw:"keyof JSX.IntrinsicElements | CustomItemComponent",elements:[{name:"JSX.IntrinsicElements"},{name:"ComponentType",elements:[{name:"CustomItemComponentProps"}],raw:"ComponentType<CustomItemComponentProps>"}]},description:`Component or element type for item element. This component will get {@link CustomItemComponentProps} as props.
@defaultValue "div"`,defaultValue:{value:'"div"',computed:!1}},scrollRef:{required:!1,tsType:{name:"RefObject",elements:[{name:"union",raw:"HTMLElement | null",elements:[{name:"HTMLElement"},{name:"null"}]}],raw:"RefObject<HTMLElement | null>"},description:"Reference to the scrollable element. The default will get the direct parent element of virtualizer."},onScroll:{required:!1,tsType:{name:"signature",type:"function",raw:"(offset: number) => void",signature:{arguments:[{type:{name:"number"},name:"offset"}],return:{name:"void"}}},description:`Callback invoked whenever scroll offset changes.
@param offset Current scrollTop, or scrollLeft if horizontal: true.`},onScrollEnd:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"Callback invoked when scrolling stops."}}};export{ie as V};
