import{j as $}from"./jsx-runtime-D_zvdyIk.js";import{r as o}from"./iframe-D0b3K_4L.js";import{a as k,u as D,A as J,j as M,b as _,r,U as X,c as G,d as B,m as F,g as K,s as Y,e as W,k as Q,l as Z,n as ee}from"./useLatestRef-CdV_OxxM.js";import{u as te,L as ne}from"./useChildren-BUGFX0-4.js";import{r as re}from"./index-DnoLG0YB.js";const se=o.forwardRef(({children:R,data:V,bufferSize:p,itemSize:h,shift:x,horizontal:L,keepMounted:S,cache:O,startMargin:b=0,ssrCount:y,as:a="div",item:q="div",scrollRef:l,onScroll:A,onScrollEnd:H},N)=>{a=a;const[P,m]=te(R,V),T=o.useRef(null),g=o.useRef(!!y),v=k(A),w=k(H),[e,u,s,c]=D(()=>{const t=!!L,n=W(m,h,y,O,!h);return[n,Q(n,t),Z(n,t),t]});m!==e.$getItemsLength()&&e.$update(J,[m,x]),b!==e.$getStartSpacerSize()&&e.$update(M,b);const[j,z]=o.useReducer(e.$getStateVersion,void 0,e.$getStateVersion),U=e.$isScrolling(),I=e.$getTotalSize(),d=[],C=t=>{const n=P(t);return $.jsx(ne,{_resizer:u.$observeItem,_index:t,_offset:e.$getItemOffset(t),_hide:e.$isUnmeasuredItem(t),_as:q,_children:n,_isHorizontal:c,_isSSR:g[r]},ee(n,t))};if(_(()=>{g[r]=!1;const t=e.$subscribe(X,i=>{i?re.flushSync(z):z()}),n=e.$subscribe(G,()=>{v[r]&&v[r](e.$getScrollOffset())}),f=e.$subscribe(B,()=>{w[r]&&w[r]()}),E=i=>{u.$observeRoot(i),s.$observe(i)};return l?F(()=>{l[r]&&E(l[r])}):E(T[r].parentElement),()=>{t(),n(),f(),u.$dispose(),s.$dispose()}},[]),_(()=>{s.$fixScrollJump()},[j]),o.useImperativeHandle(N,()=>({get cache(){return e.$getCacheSnapshot()},get scrollOffset(){return e.$getScrollOffset()},get scrollSize(){return K(e)},get viewportSize(){return e.$getViewportSize()},findStartIndex:e.$findStartIndex,findEndIndex:e.$findEndIndex,getItemOffset:e.$getItemOffset,getItemSize:e.$getItemSize,scrollToIndex:s.$scrollToIndex,scrollTo:s.$scrollTo,scrollBy:s.$scrollBy}),[]),S){const t=new Set(S);for(let[n,f]=e.$getRange(p);n<=f;n++)t.add(n);Y([...t]).forEach(n=>{d.push(C(n))})}else for(let[t,n]=e.$getRange(p);t<=n;t++)d.push(C(t));return $.jsx(a,{ref:T,style:{contain:"size paint style",overflowAnchor:"none",overflow:"clip",flex:"none",position:"relative",width:c?I:"100%",height:c?"100%":I,pointerEvents:U?"none":void 0},children:d})});se.__docgenInfo={description:"Customizable list virtualizer for advanced usage. See {@link VirtualizerProps} and {@link VirtualizerHandle}.",methods:[{name:"cache",docblock:null,modifiers:["get"],params:[],returns:null},{name:"scrollOffset",docblock:null,modifiers:["get"],params:[],returns:null},{name:"scrollSize",docblock:null,modifiers:["get"],params:[],returns:null},{name:"viewportSize",docblock:null,modifiers:["get"],params:[],returns:null}],displayName:"Virtualizer",props:{children:{required:!0,tsType:{name:"union",raw:"ReactNode | ((data: T, index: number) => ReactElement)",elements:[{name:"ReactNode"},{name:"unknown"}]},description:`Elements rendered by this component.

You can also pass a function and set {@link VirtualizerProps.data} to create elements lazily.`},data:{required:!1,tsType:{name:"ArrayLike",elements:[{name:"T"}],raw:"ArrayLike<T>"},description:"The data items rendered by this component. If you set a function to {@link VirtualizerProps.children}, you have to set this prop."},bufferSize:{required:!1,tsType:{name:"number"},description:`Extra item space in pixels to render before/after the viewport. The minimum value is 0. Lower value will give better performance but you can increase to avoid showing blank items in fast scrolling.
@defaultValue 200`},itemSize:{required:!1,tsType:{name:"number"},description:`Item size hint for unmeasured items in pixels. It will help to reduce scroll jump when items are measured if used properly.

- If not set, initial item sizes will be automatically estimated from measured sizes. This is recommended for most cases.
- If set, you can opt out estimation and use the value as initial item size.`},shift:{required:!1,tsType:{name:"boolean"},description:"While true is set, scroll position will be maintained from the end not usual start when items are added to/removed from start. It's recommended to set false if you add to/remove from mid/end of the list because it can cause unexpected behavior. This prop is useful for reverse infinite scrolling."},horizontal:{required:!1,tsType:{name:"boolean"},description:"If true, rendered as a horizontally scrollable list. Otherwise rendered as a vertically scrollable list."},keepMounted:{required:!1,tsType:{name:"unknown"},description:"List of indexes that should be always mounted, even when off screen."},cache:{required:!1,tsType:{name:"CacheSnapshot"},description:`You can restore cache by passing a {@link CacheSnapshot} on mount. This is useful when you want to restore scroll position after navigation. The snapshot can be obtained from {@link VirtualizerHandle.cache}.

**The length of items should be the same as when you take the snapshot, otherwise restoration may not work as expected.**`},startMargin:{required:!1,tsType:{name:"number"},description:"The offset to the scrollable parent before virtualizer in pixels. If you put an element before virtualizer, you have to set its height to this prop.",defaultValue:{value:"0",computed:!1}},ssrCount:{required:!1,tsType:{name:"number"},description:"A prop for SSR. If set, the specified amount of items will be mounted in the initial rendering regardless of the container size until hydrated. The minimum value is 0."},as:{required:!1,tsType:{name:"union",raw:"keyof JSX.IntrinsicElements | CustomContainerComponent",elements:[{name:"JSX.IntrinsicElements"},{name:"ComponentType",elements:[{name:"CustomContainerComponentProps"}],raw:"ComponentType<CustomContainerComponentProps>"}]},description:`Component or element type for container element.
@defaultValue "div"`,defaultValue:{value:'"div"',computed:!1}},item:{required:!1,tsType:{name:"union",raw:"keyof JSX.IntrinsicElements | CustomItemComponent",elements:[{name:"JSX.IntrinsicElements"},{name:"ComponentType",elements:[{name:"CustomItemComponentProps"}],raw:"ComponentType<CustomItemComponentProps>"}]},description:`Component or element type for item element. This component will get {@link CustomItemComponentProps} as props.
@defaultValue "div"`,defaultValue:{value:'"div"',computed:!1}},scrollRef:{required:!1,tsType:{name:"RefObject",elements:[{name:"union",raw:"HTMLElement | null",elements:[{name:"HTMLElement"},{name:"null"}]}],raw:"RefObject<HTMLElement | null>"},description:"Reference to the scrollable element. The default will get the direct parent element of virtualizer."},onScroll:{required:!1,tsType:{name:"signature",type:"function",raw:"(offset: number) => void",signature:{arguments:[{type:{name:"number"},name:"offset"}],return:{name:"void"}}},description:`Callback invoked whenever scroll offset changes.
@param offset Current scrollTop, or scrollLeft if horizontal: true.`},onScrollEnd:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"Callback invoked when scrolling stops."}}};export{se as V};
