import{c as Q,d,D as E,v as h,o as $,K as ee,L as I,M as te,f as S,g as x,h as w,j as ie,s as O,k as t,n as ne,A as se,N as s,O as ae}from"./props-DGm8Sc67.js";import{d as le,f as re,g as oe,O as z,h as de,F as ce,G as fe,j as ue,k as me,l as ye,m as pe,n as G,o as be,S as he,p as _e,q as ke,e as ve,r as Te,C as ge,t as Ee,u as Ie,b as Se,L as xe,v as we,w as Oe,x as ze,s as Ge,I as Ne,y as Re,z as Le}from"./ListItem-BYoySS7d.js";function Ce(N,i){Q(i,!0);let R=d(i,"getKey",3,oe),L=d(i,"as",3,"div"),C=d(i,"shift",3,!1),c=d(i,"horizontal",3,!1),_=d(i,"startMargin",3,0);const e=le(i.data.length,i.itemSize,i.overscan,c(),n=>{O(a,h(n))},n=>{i.onscroll&&i.onscroll(n)},()=>{i.onscrollend&&i.onscrollend()});let f=E(void 0),a=E(h([])),u=s(()=>t(a)&&e[Oe]()),M=s(()=>t(a)&&e[Re]()),k=s(()=>t(a)&&e[Le]()),v=s(()=>t(a)&&e[ze]());$(()=>{i.scrollRef?e[z](i.scrollRef):e[z](t(f).parentElement)}),ee(()=>{e[de]()}),I(()=>{i.data.length!==e[Te]()&&e[ge](i.data.length,C())}),I(()=>{_()!==e[Ee]()&&e[Ie](_())});let T;te(()=>{T!==t(v)&&(T=t(v),e[ce]())});const V=e[fe],A=e[ue],D=e[me],F=e[ye],U=e[pe],j=e[G],H=e[be],Z=e[he],K=e[_e],P=e[ke];let X=s(()=>{const[n,m]=t(u),r=[];for(let l=n,y=m;l<=y;(l+=1)-1)r.push(i.data[l]);return r}),q=s(()=>Ge({"overflow-anchor":"none",flex:"none",position:"relative",visibility:"hidden",width:c()?t(k)+"px":"100%",height:c()?"100%":t(k)+"px","pointer-events":t(M)?"none":void 0}));var g=S(),B=x(g);return re(B,L,!1,(n,m)=>{ne(n,o=>O(f,h(o)),()=>t(f));let r;se(()=>r=Se(n,r,{style:t(q)},void 0,n.namespaceURI===ae,n.nodeName.includes("-")));var l=S(),y=x(l);ve(y,19,()=>t(X),(o,p)=>R()(o,p+t(u)[0]),(o,p,J)=>{const b=s(()=>t(J)+t(u)[0]);var W=s(()=>t(a)&&e[G](t(b))),Y=s(()=>t(a)&&e[Ne](t(b)));xe(o,{get children(){return i.children},get item(){return t(p)},get index(){return t(b)},get as(){return i.item},get offset(){return t(W)},get hide(){return t(Y)},get horizontal(){return c()},get resizer(){return e[we]}})}),w(m,l)}),w(N,g),ie({getScrollOffset:V,getScrollSize:A,getViewportSize:D,getStartIndex:F,getEndIndex:U,getItemOffset:j,getItemSize:H,scrollToIndex:Z,scrollTo:K,scrollBy:P})}Ce.__docgen={data:[{name:"data",visibility:"public",description:"The data items rendered by this component.",keywords:[{name:"required",description:""}],kind:"let",type:{kind:"type",type:"array",text:"T[]"},static:!1,readonly:!1},{name:"children",visibility:"public",description:"The elements renderer snippet.",keywords:[{name:"required",description:""}],kind:"let",type:{kind:"function",text:"Snippet<[item: T, index: number]>"},static:!1,readonly:!1},{name:"getKey",visibility:"public",description:"Function that returns the key of an item in the list. It's recommended to specify whenever possible for performance.",keywords:[],kind:"let",type:{kind:"function",text:"(data: T, index: number) => string | number"},static:!1,readonly:!1,defaultValue:"function"},{name:"as",visibility:"public",description:"Component or element type for container element.",keywords:[],kind:"let",type:{kind:"union",type:[{kind:"type",type:"string",text:"string"},{kind:"type",type:"number",text:"number"}],text:"string | number"},static:!1,readonly:!1,defaultValue:'"div"'},{name:"item",visibility:"public",description:"Component or element type for item element.",keywords:[],kind:"let",type:{kind:"union",type:[{kind:"type",type:"string",text:"string"},{kind:"type",type:"number",text:"number"}],text:"string | number"},static:!1,readonly:!1},{name:"overscan",visibility:"public",description:"Number of items to render above/below the visible bounds of the list. You can increase to avoid showing blank items in fast scrolling.",keywords:[],kind:"let",type:{kind:"type",type:"number",text:"number"},static:!1,readonly:!1},{name:"scrollRef",visibility:"public",description:"Reference to the scrollable element. The default will get the direct parent element of virtualizer.",keywords:[],kind:"let",type:{kind:"type",type:"object",text:"HTMLElement"},static:!1,readonly:!1},{name:"itemSize",visibility:"public",description:`Item size hint for unmeasured items. It will help to reduce scroll jump when items are measured if used properly.

- If not set, initial item sizes will be automatically estimated from measured sizes. This is recommended for most cases.
- If set, you can opt out estimation and use the value as initial item size.`,keywords:[],kind:"let",type:{kind:"type",type:"number",text:"number"},static:!1,readonly:!1},{name:"shift",visibility:"public",description:"While true is set, scroll position will be maintained from the end not usual start when items are added to/removed from start. It's recommended to set false if you add to/remove from mid/end of the list because it can cause unexpected behavior. This prop is useful for reverse infinite scrolling.",keywords:[],kind:"let",type:{kind:"type",type:"boolean",text:"boolean"},static:!1,readonly:!1,defaultValue:"false"},{name:"horizontal",visibility:"public",description:"If true, rendered as a horizontally scrollable list. Otherwise rendered as a vertically scrollable list.",keywords:[],kind:"let",type:{kind:"type",type:"boolean",text:"boolean"},static:!1,readonly:!1,defaultValue:"false"},{name:"startMargin",visibility:"public",description:"If you put an element before virtualizer, you have to define its height with this prop.",keywords:[],kind:"let",type:{kind:"type",type:"number",text:"number"},static:!1,readonly:!1,defaultValue:"0"},{name:"onscroll",visibility:"public",description:"Callback invoked whenever scroll offset changes.",keywords:[],kind:"let",type:{kind:"function",text:"(offset: number) => void"},static:!1,readonly:!1},{name:"onscrollend",visibility:"public",description:"Callback invoked when scrolling stops.",keywords:[],kind:"let",type:{kind:"function",text:"() => void"},static:!1,readonly:!1}],name:"Virtualizer.svelte"};export{Ce as V};
