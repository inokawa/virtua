import{c as Y,d as o,D as S,v as g,o as Q,K as $,L as w,M as O,f as R,g as L,h as C,j as ee,s as z,k as e,n as te,A as ie,N as a,O as ne}from"./props-DGm8Sc67.js";import{d as ae,f as se,g as le,O as G,h as re,F as oe,G as de,j as ce,k as ue,S as fe,l as ye,m as me,e as be,n as pe,C as he,o as ve,p as ge,b as ke,L as _e,q as Te,r as Ee,t as Ie,u as xe,s as Se,v as we,w as Oe,I as Re,x as Le,y as Ce}from"./ListItem-D6c7Rqkl.js";function ze(N,t){Y(t,!0);let M=o(t,"getKey",3,le),V=o(t,"as",3,"div"),A=o(t,"overscan",3,4),D=o(t,"shift",3,!1),u=o(t,"horizontal",3,!1),k=o(t,"startMargin",3,0);const i=ae(t.data.length,t.itemSize,u(),n=>{z(s,g(n))},n=>{t.onscroll&&t.onscroll(n)},()=>{t.onscrollend&&t.onscrollend()});let y=S(void 0),s=S(g([])),l=a(()=>e(s)&&i[Ee]()),_=a(()=>e(s)&&i[Le]()),T=a(()=>e(s)&&i[Ce]()),E=a(()=>e(s)&&i[Ie]()),m=a(()=>xe(e(l)[0],e(l)[1],A(),e(_),t.data.length));Q(()=>{t.scrollRef?i[G](t.scrollRef):i[G](e(y).parentElement)}),$(()=>{i[re]()}),w(()=>{t.data.length!==i[pe]()&&i[he](t.data.length,D())}),w(()=>{k()!==i[ve]()&&i[ge](k())});let I;O(()=>{I!==e(E)&&(I=e(E),i[oe]())});let f;O(()=>{f&&f[0]===e(l)[0]&&f[1]===e(l)[1]||(f=e(l),t.onrangechange&&t.onrangechange(e(l)[0],e(l)[1]))});const F=i[de],U=i[ce],j=i[ue],H=i[fe],K=i[ye],P=i[me];let Z=a(()=>{const[n,b]=e(m),d=[];for(let r=n,p=b;r<=p;(r+=1)-1)d.push(t.data[r]);return d}),q=a(()=>Se({"overflow-anchor":"none",flex:"none",position:"relative",visibility:"hidden",width:u()?e(T)+"px":"100%",height:u()?"100%":e(T)+"px","pointer-events":e(_)!==we?"none":void 0}));var x=R(),B=L(x);return se(B,V,!1,(n,b)=>{te(n,c=>z(y,g(c)),()=>e(y));let d;ie(()=>d=ke(n,d,{style:e(q)},void 0,n.namespaceURI===ne,n.nodeName.includes("-")));var r=R(),p=L(r);be(p,19,()=>e(Z),(c,h)=>M()(c,h+e(m)[0]),(c,h,J)=>{const v=a(()=>e(J)+e(m)[0]);var W=a(()=>e(s)&&i[Oe](e(v))),X=a(()=>e(s)&&i[Re](e(v)));_e(c,{get children(){return t.children},get item(){return e(h)},get index(){return e(v)},get as(){return t.item},get offset(){return e(W)},get hide(){return e(X)},get horizontal(){return u()},get resizer(){return i[Te]}})}),C(b,r)}),C(N,x),ee({getScrollOffset:F,getScrollSize:U,getViewportSize:j,scrollToIndex:H,scrollTo:K,scrollBy:P})}ze.__docgen={data:[{name:"data",visibility:"public",description:"The data items rendered by this component.",keywords:[{name:"required",description:""}],kind:"let",type:{kind:"type",type:"array",text:"T[]"},static:!1,readonly:!1},{name:"children",visibility:"public",description:"The elements renderer snippet.",keywords:[{name:"required",description:""}],kind:"let",type:{kind:"function",text:"Snippet<[item: T, index: number]>"},static:!1,readonly:!1},{name:"getKey",visibility:"public",description:"Function that returns the key of an item in the list. It's recommended to specify whenever possible for performance.",keywords:[],kind:"let",type:{kind:"function",text:"(data: T, index: number) => string | number"},static:!1,readonly:!1,defaultValue:"function"},{name:"as",visibility:"public",description:"Component or element type for container element.",keywords:[],kind:"let",type:{kind:"union",type:[{kind:"type",type:"string",text:"string"},{kind:"type",type:"number",text:"number"}],text:"string | number"},static:!1,readonly:!1,defaultValue:'"div"'},{name:"item",visibility:"public",description:"Component or element type for item element.",keywords:[],kind:"let",type:{kind:"union",type:[{kind:"type",type:"string",text:"string"},{kind:"type",type:"number",text:"number"}],text:"string | number"},static:!1,readonly:!1},{name:"overscan",visibility:"public",description:"Number of items to render above/below the visible bounds of the list. You can increase to avoid showing blank items in fast scrolling.",keywords:[],kind:"let",type:{kind:"type",type:"number",text:"number"},static:!1,readonly:!1,defaultValue:"4"},{name:"scrollRef",visibility:"public",description:"Reference to the scrollable element. The default will get the direct parent element of virtualizer.",keywords:[],kind:"let",type:{kind:"type",type:"object",text:"HTMLElement"},static:!1,readonly:!1},{name:"itemSize",visibility:"public",description:`Item size hint for unmeasured items. It will help to reduce scroll jump when items are measured if used properly.

- If not set, initial item sizes will be automatically estimated from measured sizes. This is recommended for most cases.
- If set, you can opt out estimation and use the value as initial item size.`,keywords:[],kind:"let",type:{kind:"type",type:"number",text:"number"},static:!1,readonly:!1},{name:"shift",visibility:"public",description:"While true is set, scroll position will be maintained from the end not usual start when items are added to/removed from start. It's recommended to set false if you add to/remove from mid/end of the list because it can cause unexpected behavior. This prop is useful for reverse infinite scrolling.",keywords:[],kind:"let",type:{kind:"type",type:"boolean",text:"boolean"},static:!1,readonly:!1,defaultValue:"false"},{name:"horizontal",visibility:"public",description:"If true, rendered as a horizontally scrollable list. Otherwise rendered as a vertically scrollable list.",keywords:[],kind:"let",type:{kind:"type",type:"boolean",text:"boolean"},static:!1,readonly:!1,defaultValue:"false"},{name:"startMargin",visibility:"public",description:"If you put an element before virtualizer, you have to define its height with this prop.",keywords:[],kind:"let",type:{kind:"type",type:"number",text:"number"},static:!1,readonly:!1,defaultValue:"0"},{name:"onscroll",visibility:"public",description:"Callback invoked whenever scroll offset changes.",keywords:[],kind:"let",type:{kind:"function",text:"(offset: number) => void"},static:!1,readonly:!1},{name:"onscrollend",visibility:"public",description:"Callback invoked when scrolling stops.",keywords:[],kind:"let",type:{kind:"function",text:"() => void"},static:!1,readonly:!1},{name:"onrangechange",visibility:"public",description:"Callback invoked when visible items range changes.",keywords:[],kind:"let",type:{kind:"function",text:"(startIndex: number, endIndex: number) => void"},static:!1,readonly:!1}],name:"Virtualizer.svelte"};export{ze as V};
