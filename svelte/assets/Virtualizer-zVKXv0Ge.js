import{c as Z,d,s as S,v as y,D as w,o as $,K as ee,L as T,M as te,f as x,g as z,h as I,j as ie,k as i,n as ne,A as se,N as a,O as ae}from"./props-EeEA5hs9.js";import{d as re,f as le,g as oe,U as de,h as ce,j as fe,k as ue,l as me,m as ye,e as be,n as pe,A as ge,o as he,b as ve,L as ke,s as Se}from"./ListItem-DHIiBQX_.js";function we(_,t){Z(t,!0);let E=d(t,"getKey",3,me),V=d(t,"as",3,"div"),O=d(t,"shift",3,!1),o=d(t,"horizontal",3,!1),b=d(t,"startMargin",3,0);const e=re(t.data.length,t.itemSize,t.overscan,void 0,void 0,!t.itemSize),u=le(e,o()),r=oe(e,o()),R=e.$subscribe(de,()=>{S(n,y(e.$getStateVersion()))}),A=e.$subscribe(ce,()=>{t.onscroll&&t.onscroll(e.$getScrollOffset())}),N=e.$subscribe(fe,()=>{t.onscrollend&&t.onscrollend()});let m=w(void 0),n=w(y(e.$getStateVersion())),C=a(()=>i(n)&&e.$getRange()),L=a(()=>i(n)&&e.$isScrolling()),p=a(()=>i(n)&&e.$getTotalSize());$(()=>{const s=c=>{u.$observeRoot(c),r.$observe(c)};t.scrollRef?s(t.scrollRef):s(i(m).parentElement)}),ee(()=>{R(),A(),N(),u.$dispose(),r.$dispose()}),T(()=>{t.data.length!==e.$getItemsLength()&&e.$update(ge,[t.data.length,O()])}),T(()=>{b()!==e.$getStartSpacerSize()&&e.$update(he,b())});let g;te(()=>{g!==i(n)&&(g=i(n),r.$fixScrollJump())});const M=e.$getScrollOffset,U=()=>ye(e),D=e.$getViewportSize,G=e.$findStartIndex,K=e.$findEndIndex,j=e.$getItemOffset,H=e.$getItemSize,P=r.$scrollToIndex,F=r.$scrollTo,q=r.$scrollBy;let B=a(()=>Se({"overflow-anchor":"none",flex:"none",position:"relative",visibility:"hidden",width:o()?i(p)+"px":"100%",height:o()?"100%":i(p)+"px","pointer-events":i(L)?"none":void 0}));var h=x(),J=z(h);return ue(J,V,!1,(s,c)=>{ne(s,l=>S(m,y(l)),()=>i(m));let v;se(()=>v=ve(s,v,{style:i(B)},void 0,s.namespaceURI===ae,s.nodeName.includes("-")));var k=x(),W=z(k);be(W,17,()=>pe(i(C)),l=>E()(t.data[l],l),(l,f)=>{const Y=a(()=>t.data[i(f)]);var Q=a(()=>i(n)&&e.$getItemOffset(i(f))),X=a(()=>i(n)&&e.$isUnmeasuredItem(i(f)));ke(l,{get children(){return t.children},get item(){return i(Y)},get index(){return i(f)},get as(){return t.item},get offset(){return i(Q)},get hide(){return i(X)},get horizontal(){return o()},get resizer(){return u.$observeItem}})}),I(c,k)}),I(_,h),ie({getScrollOffset:M,getScrollSize:U,getViewportSize:D,findStartIndex:G,findEndIndex:K,getItemOffset:j,getItemSize:H,scrollToIndex:P,scrollTo:F,scrollBy:q})}we.__docgen={data:[{name:"data",visibility:"public",description:"The data items rendered by this component.",keywords:[{name:"required",description:""}],kind:"let",type:{kind:"type",type:"array",text:"T[]"},static:!1,readonly:!1},{name:"children",visibility:"public",description:"The elements renderer snippet.",keywords:[{name:"required",description:""}],kind:"let",type:{kind:"function",text:"Snippet<[item: T, index: number]>"},static:!1,readonly:!1},{name:"getKey",visibility:"public",description:"Function that returns the key of an item in the list. It's recommended to specify whenever possible for performance.",keywords:[],kind:"let",type:{kind:"function",text:"(data: T, index: number) => string | number"},static:!1,readonly:!1,defaultValue:"function"},{name:"as",visibility:"public",description:"Component or element type for container element.",keywords:[],kind:"let",type:{kind:"union",type:[{kind:"type",type:"string",text:"string"},{kind:"type",type:"number",text:"number"}],text:"string | number"},static:!1,readonly:!1,defaultValue:'"div"'},{name:"item",visibility:"public",description:"Component or element type for item element.",keywords:[],kind:"let",type:{kind:"union",type:[{kind:"type",type:"string",text:"string"},{kind:"type",type:"number",text:"number"}],text:"string | number"},static:!1,readonly:!1},{name:"overscan",visibility:"public",description:"Number of items to render above/below the visible bounds of the list. You can increase to avoid showing blank items in fast scrolling.",keywords:[],kind:"let",type:{kind:"type",type:"number",text:"number"},static:!1,readonly:!1},{name:"scrollRef",visibility:"public",description:"Reference to the scrollable element. The default will get the direct parent element of virtualizer.",keywords:[],kind:"let",type:{kind:"type",type:"object",text:"HTMLElement"},static:!1,readonly:!1},{name:"itemSize",visibility:"public",description:`Item size hint for unmeasured items. It will help to reduce scroll jump when items are measured if used properly.

- If not set, initial item sizes will be automatically estimated from measured sizes. This is recommended for most cases.
- If set, you can opt out estimation and use the value as initial item size.`,keywords:[],kind:"let",type:{kind:"type",type:"number",text:"number"},static:!1,readonly:!1},{name:"shift",visibility:"public",description:"While true is set, scroll position will be maintained from the end not usual start when items are added to/removed from start. It's recommended to set false if you add to/remove from mid/end of the list because it can cause unexpected behavior. This prop is useful for reverse infinite scrolling.",keywords:[],kind:"let",type:{kind:"type",type:"boolean",text:"boolean"},static:!1,readonly:!1,defaultValue:"false"},{name:"horizontal",visibility:"public",description:"If true, rendered as a horizontally scrollable list. Otherwise rendered as a vertically scrollable list.",keywords:[],kind:"let",type:{kind:"type",type:"boolean",text:"boolean"},static:!1,readonly:!1,defaultValue:"false"},{name:"startMargin",visibility:"public",description:"If you put an element before virtualizer, you have to define its height with this prop.",keywords:[],kind:"let",type:{kind:"type",type:"number",text:"number"},static:!1,readonly:!1,defaultValue:"0"},{name:"onscroll",visibility:"public",description:"Callback invoked whenever scroll offset changes.",keywords:[],kind:"let",type:{kind:"function",text:"(offset: number) => void"},static:!1,readonly:!1},{name:"onscrollend",visibility:"public",description:"Callback invoked when scrolling stops.",keywords:[],kind:"let",type:{kind:"function",text:"() => void"},static:!1,readonly:!1}],name:"Virtualizer.svelte"};export{we as V};
